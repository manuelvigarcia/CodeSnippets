Consider an array of n integers, A=[a0, a1, a2,...,an-1]. The distance between
 two indices, i and j, is denoted by dij= |i-j|.

Given A, find the minimum dij such that ai=aj and i!=j. In other words, find the
minimum distance between any pair of equal elements in the array. If no such value
 exists, print -1.

Note: |a| denotes the absolute value of a.

Input Format

The first line contains an integer, n, denoting the size of array A.
The second line contains n space-separated integers describing the respective 
elements in array A.

Constraints
1 <= n <= 10^3
1 <= ai <= 10^5

Output Format

Print a single integer denoting the minimum dij in A; if no such value exists,
print -1.

Sample Input

6
7 1 3 4 1 7

Sample Output

3

Explanation
Here, we have two options:

    a1 and a4 are both 1, so d14 = |1-4| = 3.
    a0 and a5 are both 7, so d05 = |0-5| = 5.

The answer is min(3,5) = 3.

import java.io.*;

import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;
public class Solution {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int A[] = new int[n];
        for(int A_i=0; A_i < n; A_i++){
            A[A_i] = in.nextInt();
        }
    }
}
